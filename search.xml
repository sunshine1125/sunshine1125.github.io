<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[AngularJs单元测试]]></title>
    <url>%2F2018%2F12%2F05%2FAngularJs%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[因为项目要求，需要对一个angularjs项目进行单元测试，所以就去简单学习了一下，主要利用Karma和Jasmine来进行ng模块的单元测试。 介绍KarmaKarma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用。这个测试工具的一个强大特性就是它可以监控文件的变化，然后自动执行，通过console.log显示测试结果。 JasmineJasmine是一个用域JS代码测试的行为驱动开发的框架，它不依赖于任何其他的JS框架以及DOM，是一个简洁及友好的API测试库。 安装在Karma的官方文档中，介绍的有安装方法。首先你的电脑上需要安装的有Node.js，目前支持的Node.js版本有6.x, 8.x, 10.x。 12345# Install Karma:$ npm install karma --save-dev# Install plugins that your project needs:$ npm install karma-jasmine karma-chrome-launcher jasmine-core --save-dev 安装成功后，这些模块会保存在你的项目里的package.json文件的devDependencies属性里。12# Run Karma:$ ./node_modules/karma/bin/karma start 因为是局部安装，所以需要进入到安装目录下面执行，当然我们也可以全局安装，这样使用起来可能更方便一些。1$ npm install -g karma-cli 配置在项目根目录下，执行1$ karma init my.conf.js 当然，配置文件的名字可以随意更改，命令执行的时候会询问一些问题，一般使用默认配置就好。执行完之后会生成一个my.conf.js文件，文件内容如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768// Karma configuration// Generated on Mon Nov 12 2018 16:11:21 GMT+0800 (中国标准时间)module.exports = function(config) &#123; config.set(&#123; // base path that will be used to resolve all patterns (eg. files, exclude) basePath: &apos;&apos;, // frameworks to use // available frameworks: https://npmjs.org/browse/keyword/karma-adapter frameworks: [&apos;jasmine&apos;], // list of files / patterns to load in the browser files: [ ], // list of files / patterns to exclude exclude: [ ], // preprocess matching files before serving them to the browser // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor preprocessors: &#123; &#125;, // test results reporter to use // possible values: &apos;dots&apos;, &apos;progress&apos; // available reporters: https://npmjs.org/browse/keyword/karma-reporter reporters: [&apos;progress&apos;], // web server port port: 9876, // enable / disable colors in the output (reporters and logs) colors: true, // level of logging // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG logLevel: config.LOG_INFO, // enable / disable watching file and executing tests whenever any file changes autoWatch: true, // start these browsers // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher browsers: [&apos;Chrome&apos;], // Continuous Integration mode // if true, Karma captures browsers, runs the tests and exits singleRun: false, // Concurrency level // how many browser should be started simultaneous concurrency: Infinity &#125;)&#125; 12# Start Karma using your configuration:$ karma start my.conf.js 执行上述命令会自动打开一个浏览器，可以用来Debug。至此，我们测试环境已经配置好了，下面结合具体项目来进行测试。 实例准备因为angularjs是通过依赖注入的方式来加载以及实例化的，所以为了方便配合jasmine来编写测试脚本，官方提供了angular-mock来提供模块定义，加载，注入等。所以还需要安装一下angular-mocks，我的项目目录如下，因为我的Karma是全局安装的，所以没有node_modules文件。可以看到我需要测试的文件是index.js，测试用例在spec目录下，对应的是index.spec.js。接下来我们结合项目更改一下Karma配置文件，把依赖和待测试文件放到files数组中。1234567// list of files / patterns to load in the browser files: [ &apos;./bower_components/angular/angular.js&apos;, &apos;./bower_components/angular-mocks/angular-mocks.js&apos;, &apos;./src/js/*.js&apos;, &apos;./src/spec/*[sS]pec.js&apos; ] index.js内容如下，包括controller, services, directive和filter：123456789101112131415161718192021222324252627282930313233343536373839404142434445var app = angular.module(&apos;myApp&apos;, []);app.controller(&apos;myAppController&apos;, [&apos;$scope&apos;, &apos;myService&apos;, function($scope, myService) &#123; $scope.count = 0; $scope.add = function() &#123; $scope.count ++; &#125;; $scope.reset = function() &#123; $scope.count = 0; &#125;; $scope.get = function () &#123; myService.getData().then(function (res) &#123; $scope.data = res.data; &#125;) &#125;&#125;]);app.service(&apos;myService&apos;, [&apos;$http&apos;, function ($http) &#123; return &#123; getData: getData &#125; function getData() &#123; return $http.get(&quot;http://rapapi.org/mockjsdata/29387/getCartList&quot;); &#125;&#125;])app.directive(&apos;currentDate&apos;, function() &#123; return &#123; restrict: &apos;E&apos;, replace: &apos;false&apos;, template: `&lt;h4 style=&quot;margin: 100px auto&quot;&gt;$&#123;new Date().getFullYear()&#125;&lt;/h4&gt;` &#125;&#125;);app.filter(&apos;percentage&apos;, function() &#123; return function(num) &#123; if (num == null) &#123; return &apos;0%&apos;; &#125; else &#123; return (parseFloat(num) * 100).toFixed(0) + &apos;%&apos;; &#125; &#125;;&#125;); index.spec.js文件，包括对controller，services，directive和filter的测试，代码中都标有注释，就不详细说了：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566describe(&apos;myApp&apos;, function() &#123; // 引入模块 beforeEach(module(&apos;myApp&apos;)); // 测试controller describe(&apos;test controller&apos;, function () &#123; var scope, ctrl; beforeEach(inject(function($rootScope, $controller) &#123; // scope是rootScope new出来的 scope = $rootScope.$new(); ctrl = $controller(&apos;myAppController&apos;, &#123;$scope: scope&#125;); &#125;)); it(&apos;addFunction&apos;, inject(function() &#123; expect(scope.count).toEqual(0); scope.add(); expect(scope.count).toEqual(1); &#125;)); it(&apos;resetFunction&apos;, inject(function () &#123; scope.reset(); expect(scope.count).toEqual(0); &#125;)); // 测试services it(&apos;getFunction&apos;, inject(function ($injector) &#123; // $httpBackend 是由angular mock提供的一个模拟http请求返回服务 // 可以用它来模拟http请求的返回值 // 这里通过$injector来获取它的实例 var $httpBackend = $injector.get(&apos;$httpBackend&apos;); $httpBackend.when(&apos;GET&apos;, &apos;http://rapapi.org/mockjsdata/29387/getCartList&apos;).respond(&#123; age: &apos;18&apos;, name: &apos;tina&apos; &#125;) scope.get(); //把http的异步转为同步，要求$httpBackend立刻返回数据 $httpBackend.flush(); expect(scope.data).toEqual(&#123; age: &apos;18&apos;, name: &apos;tina&apos; &#125;); &#125;)) &#125;) // 测试过滤器 describe(&apos;test filter&apos;, function() &#123; it(&quot;should return 60&quot;, inject(function (percentageFilter) &#123; expect(percentageFilter(0.6)).toBe(&apos;60%&apos;); &#125;)) &#125;) // 测试指令 describe(&apos;test directive&apos;, function() &#123; it(&quot;should get 2018&quot;, inject(function ($compile, $rootScope) &#123; scope = $rootScope.$new(); // 调用指令 elem = angular.element(&apos;&lt;current-date&gt;&lt;/current-date&gt;&apos;); // 编译 $compile(elem)(scope); console.log(elem.html()); expect(elem.html()).toEqual(&apos;2018&apos;) &#125;)) &#125;)&#125;); 至于测试用例怎么书写就不详细介绍了，可参考文档，也可参考博客。 执行在package.json文件中添加123&quot;scripts&quot;: &#123; &quot;test&quot;: &quot;karma start karma.config.js&quot; &#125; 终端输入1npm test 效果如下：]]></content>
      <categories>
        <category>angularjs</category>
      </categories>
      <tags>
        <tag>angularjs</tag>
      </tags>
  </entry>
</search>
