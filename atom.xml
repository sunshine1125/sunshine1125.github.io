<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小窝</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-05T09:06:28.343Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>real_ting</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/12/05/hello-world/"/>
    <id>http://yoursite.com/2018/12/05/hello-world/</id>
    <published>2018-12-05T09:06:28.342Z</published>
    <updated>2018-12-05T09:06:28.343Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a><br><a id="more"></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AngularJs单元测试</title>
    <link href="http://yoursite.com/2018/12/05/AngularJs%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2018/12/05/AngularJs单元测试/</id>
    <published>2018-12-05T08:44:50.000Z</published>
    <updated>2018-12-05T09:09:18.133Z</updated>
    
    <content type="html"><![CDATA[<p>因为项目要求，需要对一个angularjs项目进行单元测试，所以就去简单学习了一下，主要利用Karma和Jasmine来进行ng模块的单元测试。</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h5 id="Karma"><a href="#Karma" class="headerlink" title="Karma"></a><a href="http://karma-runner.github.io/latest/index.html" target="_blank" rel="noopener">Karma</a></h5><p>Karma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用。这个测试工具的一个强大特性就是它可以监控文件的变化，然后自动执行，通过console.log显示测试结果。<br><a id="more"></a></p><h5 id="Jasmine"><a href="#Jasmine" class="headerlink" title="Jasmine"></a><a href="https://jasmine.github.io/" target="_blank" rel="noopener">Jasmine</a></h5><p>Jasmine是一个用域JS代码测试的行为驱动开发的框架，它不依赖于任何其他的JS框架以及DOM，是一个简洁及友好的API测试库。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在Karma的<a href="http://karma-runner.github.io/3.0/intro/installation.html" target="_blank" rel="noopener">官方文档</a>中，介绍的有安装方法。<br>首先你的电脑上需要安装的有Node.js，目前支持的Node.js版本有6.x, 8.x, 10.x。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Install Karma:</span><br><span class="line">$ npm install karma --save-dev</span><br><span class="line"></span><br><span class="line"># Install plugins that your project needs:</span><br><span class="line">$ npm install karma-jasmine karma-chrome-launcher jasmine-core --save-dev</span><br></pre></td></tr></table></figure><p>安装成功后，这些模块会保存在你的项目里的package.json文件的devDependencies属性里。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Run Karma:</span><br><span class="line">$ ./node_modules/karma/bin/karma start</span><br></pre></td></tr></table></figure></p><p>因为是局部安装，所以需要进入到安装目录下面执行，当然我们也可以全局安装，这样使用起来可能更方便一些。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g karma-cli</span><br></pre></td></tr></table></figure></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在项目根目录下，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ karma init my.conf.js</span><br></pre></td></tr></table></figure></p><p>当然，配置文件的名字可以随意更改，命令执行的时候会询问一些问题，一般使用默认配置就好。执行完之后会生成一个my.conf.js文件，文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">// Karma configuration</span><br><span class="line">// Generated on Mon Nov 12 2018 16:11:21 GMT+0800 (中国标准时间)</span><br><span class="line"></span><br><span class="line">module.exports = function(config) &#123;</span><br><span class="line">  config.set(&#123;</span><br><span class="line"></span><br><span class="line">    // base path that will be used to resolve all patterns (eg. files, exclude)</span><br><span class="line">    basePath: &apos;&apos;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // frameworks to use</span><br><span class="line">    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span><br><span class="line">    frameworks: [&apos;jasmine&apos;],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // list of files / patterns to load in the browser</span><br><span class="line">    files: [</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // list of files / patterns to exclude</span><br><span class="line">    exclude: [</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // preprocess matching files before serving them to the browser</span><br><span class="line">    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span><br><span class="line">    preprocessors: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // test results reporter to use</span><br><span class="line">    // possible values: &apos;dots&apos;, &apos;progress&apos;</span><br><span class="line">    // available reporters: https://npmjs.org/browse/keyword/karma-reporter</span><br><span class="line">    reporters: [&apos;progress&apos;],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // web server port</span><br><span class="line">    port: 9876,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // enable / disable colors in the output (reporters and logs)</span><br><span class="line">    colors: true,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // level of logging</span><br><span class="line">    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span><br><span class="line">    logLevel: config.LOG_INFO,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // enable / disable watching file and executing tests whenever any file changes</span><br><span class="line">    autoWatch: true,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // start these browsers</span><br><span class="line">    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span><br><span class="line">    browsers: [&apos;Chrome&apos;],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // Continuous Integration mode</span><br><span class="line">    // if true, Karma captures browsers, runs the tests and exits</span><br><span class="line">    singleRun: false,</span><br><span class="line"></span><br><span class="line">    // Concurrency level</span><br><span class="line">    // how many browser should be started simultaneous</span><br><span class="line">    concurrency: Infinity</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Start Karma using your configuration:</span><br><span class="line">$ karma start my.conf.js</span><br></pre></td></tr></table></figure><p>执行上述命令会自动打开一个浏览器，可以用来Debug。<br><img src="https://upload-images.jianshu.io/upload_images/11156470-193b1f4a1f4000a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Karma"><br>至此，我们测试环境已经配置好了，下面结合具体项目来进行测试。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><p>因为angularjs是通过依赖注入的方式来加载以及实例化的，所以为了方便配合jasmine来编写测试脚本，官方提供了angular-mock来提供模块定义，加载，注入等。所以还需要安装一下angular-mocks，我的项目目录如下，因为我的Karma是全局安装的，所以没有node_modules文件。<br><img src="https://upload-images.jianshu.io/upload_images/11156470-53b3559ad6d54cf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目目录"><br>可以看到我需要测试的文件是index.js，测试用例在spec目录下，对应的是index.spec.js。<br>接下来我们结合项目更改一下Karma配置文件，把依赖和待测试文件放到files数组中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// list of files / patterns to load in the browser</span><br><span class="line">    files: [</span><br><span class="line">        &apos;./bower_components/angular/angular.js&apos;,</span><br><span class="line">        &apos;./bower_components/angular-mocks/angular-mocks.js&apos;,</span><br><span class="line">        &apos;./src/js/*.js&apos;,</span><br><span class="line">        &apos;./src/spec/*[sS]pec.js&apos;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure></p><p>index.js内容如下，包括controller, services, directive和filter：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">var app = angular.module(&apos;myApp&apos;, []);</span><br><span class="line">app.controller(&apos;myAppController&apos;, [&apos;$scope&apos;, &apos;myService&apos;, function($scope, myService) &#123;</span><br><span class="line">    $scope.count = 0;</span><br><span class="line">    $scope.add = function() &#123;</span><br><span class="line">       $scope.count ++;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $scope.reset = function() &#123;</span><br><span class="line">        $scope.count = 0;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    $scope.get = function () &#123;</span><br><span class="line">        myService.getData().then(function (res) &#123;</span><br><span class="line">            $scope.data = res.data;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;]);</span><br><span class="line"></span><br><span class="line">app.service(&apos;myService&apos;, [&apos;$http&apos;, function ($http) &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        getData: getData</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getData() &#123;</span><br><span class="line">        return $http.get(&quot;http://rapapi.org/mockjsdata/29387/getCartList&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;])</span><br><span class="line"></span><br><span class="line">app.directive(&apos;currentDate&apos;, function() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    restrict: &apos;E&apos;,</span><br><span class="line">    replace: &apos;false&apos;,</span><br><span class="line">    template: `&lt;h4 style=&quot;margin: 100px auto&quot;&gt;$&#123;new Date().getFullYear()&#125;&lt;/h4&gt;`</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.filter(&apos;percentage&apos;, function() &#123;</span><br><span class="line">    return function(num) &#123;</span><br><span class="line">        if (num == null) &#123;</span><br><span class="line">            return &apos;0%&apos;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return (parseFloat(num) * 100).toFixed(0) + &apos;%&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>index.spec.js文件，包括对controller，services，directive和filter的测试，代码中都标有注释，就不详细说了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">describe(&apos;myApp&apos;, function() &#123;</span><br><span class="line">    // 引入模块</span><br><span class="line">    beforeEach(module(&apos;myApp&apos;));</span><br><span class="line"></span><br><span class="line">    // 测试controller</span><br><span class="line">    describe(&apos;test controller&apos;, function () &#123;</span><br><span class="line">        var scope, ctrl;</span><br><span class="line">        beforeEach(inject(function($rootScope, $controller) &#123;</span><br><span class="line">            // scope是rootScope new出来的</span><br><span class="line">            scope = $rootScope.$new();</span><br><span class="line">            ctrl = $controller(&apos;myAppController&apos;, &#123;$scope: scope&#125;);</span><br><span class="line">        &#125;));</span><br><span class="line">        it(&apos;addFunction&apos;, inject(function() &#123;</span><br><span class="line">            expect(scope.count).toEqual(0);</span><br><span class="line">            scope.add();</span><br><span class="line">            expect(scope.count).toEqual(1);</span><br><span class="line"></span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        it(&apos;resetFunction&apos;, inject(function () &#123;</span><br><span class="line">            scope.reset();</span><br><span class="line">            expect(scope.count).toEqual(0);</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        // 测试services</span><br><span class="line">        it(&apos;getFunction&apos;, inject(function ($injector) &#123;</span><br><span class="line">            // $httpBackend 是由angular mock提供的一个模拟http请求返回服务</span><br><span class="line">            // 可以用它来模拟http请求的返回值</span><br><span class="line">            // 这里通过$injector来获取它的实例</span><br><span class="line">            var $httpBackend = $injector.get(&apos;$httpBackend&apos;);</span><br><span class="line">            $httpBackend.when(&apos;GET&apos;, &apos;http://rapapi.org/mockjsdata/29387/getCartList&apos;).respond(&#123;</span><br><span class="line">                age: &apos;18&apos;,</span><br><span class="line">                name: &apos;tina&apos;</span><br><span class="line">            &#125;)</span><br><span class="line">            scope.get();</span><br><span class="line"></span><br><span class="line">            //把http的异步转为同步，要求$httpBackend立刻返回数据</span><br><span class="line">            $httpBackend.flush();</span><br><span class="line"></span><br><span class="line">            expect(scope.data).toEqual(&#123;</span><br><span class="line">                age: &apos;18&apos;,</span><br><span class="line">                name: &apos;tina&apos;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 测试过滤器</span><br><span class="line">    describe(&apos;test filter&apos;, function() &#123;</span><br><span class="line">        it(&quot;should return 60&quot;, inject(function (percentageFilter) &#123;</span><br><span class="line">            expect(percentageFilter(0.6)).toBe(&apos;60%&apos;);</span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 测试指令</span><br><span class="line">    describe(&apos;test directive&apos;, function() &#123;</span><br><span class="line">        it(&quot;should get 2018&quot;, inject(function ($compile, $rootScope) &#123;</span><br><span class="line">            scope = $rootScope.$new();</span><br><span class="line">            // 调用指令</span><br><span class="line">            elem = angular.element(&apos;&lt;current-date&gt;&lt;/current-date&gt;&apos;);</span><br><span class="line">            // 编译</span><br><span class="line">            $compile(elem)(scope);</span><br><span class="line">            console.log(elem.html());</span><br><span class="line">            expect(elem.html()).toEqual(&apos;2018&apos;)</span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>至于测试用例怎么书写就不详细介绍了，可参考<a href="https://jasmine.github.io/" target="_blank" rel="noopener">文档</a>，也可参考<a href="https://blog.csdn.net/guojiangweigege/article/details/52121876" target="_blank" rel="noopener">博客</a>。</p><h5 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h5><p>在package.json文件中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;karma start karma.config.js&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>终端输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm test</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><img src="https://upload-images.jianshu.io/upload_images/11156470-8fccc1d199dc71d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为项目要求，需要对一个angularjs项目进行单元测试，所以就去简单学习了一下，主要利用Karma和Jasmine来进行ng模块的单元测试。&lt;/p&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;h5 id=&quot;Karma&quot;&gt;&lt;a href=&quot;#Karma&quot; class=&quot;headerlink&quot; title=&quot;Karma&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://karma-runner.github.io/latest/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Karma&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Karma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用。这个测试工具的一个强大特性就是它可以监控文件的变化，然后自动执行，通过console.log显示测试结果。&lt;br&gt;
    
    </summary>
    
      <category term="angularjs" scheme="http://yoursite.com/categories/angularjs/"/>
    
    
      <category term="angularjs" scheme="http://yoursite.com/tags/angularjs/"/>
    
  </entry>
  
</feed>
